'''
# Import the function
>>> fromlib import import_module
>>> matrix_divided = import_module('2-matrix_divided').matrix_divided

# correct arguments
>>> matrix_divided([[1,2,3],[4,5,6]], 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]
>>> matrix_divide([[2,3]], 2.5)
[[0.8, 1.2]]

# incorrect arguments
>>> try:
...     matrix_divided([[]], 2)
... except TypeError as e:
...     print(e.args[0])
matrix must be a matrix (list of lists) of integers/floats
>>> try:
...     matrix_divided([(1, 1)], 2)
... except TypeError as e:
...     print(e.args[0])
matrix must be a matrix (list of lists) of integers/floats
>>> try:
...     matrix_divided([2], 2)
... except TypeError as e:
...     print(e.args[0])
matrix must be a matrix (list of lists) of integers/floats
>>> try:
...     matrix_divided([['7', '9']], 2)
... except TypeError as e:
...     print(e.args[0])
matrix must be a matrix (list of lists) of integers/floats
>>> try:
...     matrix_divided([[1, 4], [18, 9], 3], 2)
... except TypeError as e:
...     print(e.args[0])
matrix must be a matrix (list of lists) of integers/floats
>>> try:
...     matrix_divided([[7, 9, 12], [5], [1, 2, 3]], 2)
... except TypeError as e:
...     print(e.args[0])
Each row of the matrix must have the same size
>>> try:
...     matrix_divided([[7, 9, 12], [1, 2, 3], [7, 13, 15, 18]], 2)
... except TypeError as e:
...     print(e.args[0])
Each row of the matrix must have the same size
>>> try:
...     matrix_divided([[4]], '2')
... except TypeError as e:
...     print(e.args[0])
div must be a number
>>> try:
...     matrix_divided([[4]], b'2')
... except TypeError as e:
...     print(e.args[0])
div must be a number
>>> try:
...     matrix_divided([[1, 3]], 0)
... except ZeroDivisionError as e:
...     print(e.args[0])
division by zero

'''
